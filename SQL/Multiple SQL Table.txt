 
/*
JOIN will combine rows from different tables if the join condition is true.

LEFT JOIN will return every row in the left table, and if the join condition is not met, NULL values are used to fill in the columns from the right table.

Primary key is a column that serves a unique identifier for the rows in the table.

Foreign key is a column that contains the primary key to another table.

CROSS JOIN lets us combine all rows of one table with all rows of another table.

UNION stacks one dataset on top of another.

WITH allows us to define one or more temporary tables that can be used in the final query.

/*
 /**************************1***************************************/
SELECT *
FROM orders
/*JUNTAR CUSTOMERS FROM ORDERS*/
JOIN customers
  ON orders.customer_id = customers.customer_id;
/*We want to match orders table’s customer_id column with customers table’s customer_id column.*/

/*exemplo*/

SELECT *
FROM orders 
JOIN subscriptions
	ON orders.subscription_id = subscriptions.subscription_id
  WHERE  subscriptions.description = 'Fashion Magazine';
  /*junta as 2 colunas na coluna "subscription_id"*/
  
  /*APENAS JUNTA QUANDO SE TEM VALORES IGUAIS, OS VALORES DIFERENTES NAO SAO JUNTADOS*/
  https://s3.amazonaws.com/codecademy-content/courses/learn-sql/multiple-tables/inner-join.gif
  
  /*THER ORDER DOESN'T MATTER*/
  
  /**************************2***************************************/
  
  /*Juntar mesmo que tenha valores diferentes*/
  
  SELECT *
FROM table1
LEFT JOIN table2
  ON table1.c2 = table2.c2;
  
  https://s3.amazonaws.com/codecademy-content/courses/learn-sql/multiple-tables/left-join.gif
  
 /****************************3*************************************/

  SELECT *
FROM classes
JOIN students
  ON classes.id = students.class_id;
  /*The students table contains information on all students 
  in the school. Its primary key is id. It contains the foreign key class_id, 
  which corresponds to the primary key of classes.*/
  /****************************4*************************************/
CROSS JOIN /*junta tudo*/


 /****************************5*************************************/

  /*Suppose we have two tables and they have the same columns.*/

table1:

pokemon	type
Bulbasaur	Grass
Charmander	Fire
Squirtle	Water

table2:

pokemon	type
Snorlax	Normal

/*If we combine these two with UNION:*/

SELECT *
FROM table1
UNION
SELECT *
FROM table2;

The result would be:
pokemon	type
Bulbasaur	Grass
Charmander	Fire
Squirtle	Water
Snorlax	Normal
/*
SQL has strict rules for appending data:

Tables must have the same number of columns.
The columns must have the same data types in the same order as the first table.*/

 /****************************6*************************************/

 WITH previous_results AS (
   SELECT ...
   ...
   ...
   ...
)
SELECT *
FROM previous_results
JOIN customers
  ON _____ = _____;
  /*The WITH statement allows us to perform a separate query (such as aggregating customer’s subscriptions)
previous_results is the alias that we will use to reference any columns from the query inside of the WITH clause
We can then go on to do whatever we want with this temporary table (such as join the temporary table with another table)*/