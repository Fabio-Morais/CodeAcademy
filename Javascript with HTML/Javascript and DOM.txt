.innerHTML
//The innerHTML property sets or returns the HTML content (inner HTML) of an element.

document.body.innerHTML = 'The cat loves the dog.';

----------------------------------------

.querySelector()
//The .querySelector() method allows us to specify a CSS selector and then returns the first element that matches that selector. 

document.querySelector('p'); // vai procurar pelo seletor 'p'

----------------------------------------

.getElementByID()


document.getElementById('bio').innerHTML = 'The description';

----------------------------------------

.style
//The .style property of a DOM element provides access to the inline style of that HTML tag.

let blueElement = document.querySelector('.blue');
blueElement.style.backgroundColor = 'blue';

----------------------------------------
.createElement('p'); //create a element empty

let paragraph = document.createElement('p');
paragraph.id = "description";
paragraph.innerHTML = 'The text inside paragraph';
document.body.appendChild(paragraph);

//Add another element into html 

----------------------------------------

.removeChild()
document.getElementById('sign').hidden = true;

let paragraph = document.querySelector('p');
document.body.removeChild(paragraph);

----------------------------------------

const parent = document.querySelector("#more-destinations");

const child = document.querySelector("#oaxaca");

parent.removeChild(child);
/*
Select the element with the ID oaxaca and save it to a variable.
Select its parent, assigned an ID of more-destinations.
Remove the element using the .removeChild() method and passing in the variable containing the oaxaca element.
*/

----------------------------------------

let element = document.querySelector("button");

function turnButtonRed (){
	element.style.backgroundColor = "red";
  element.style.color = "white";
  element.innerHTML = "Red Button"; 
}

element.onclick = turnButtonRed;



/*
The document keyword grants access to the root of the DOM in JavaScript
The DOM Interface allows you to select a specific element with CSS selectors by using the .querySelector() method
You can also access an element directly by its ID with .getElementById()
The .innerHTML and .style properties allow you to modify an element by changing its contents or style respectively
You can create, append, and remove elements by using the .createElement(),.appendChild() and .removeChild() methods respectively
The .onclick property can add interactivity to a DOM element based on a click event
*/